  identity = function(value) {
    return value;
  };
  
  isArray = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  each = function(obj, iterator, context) {
    var value;
    if (obj == null) return;
    for (var i = 0, l = obj.length; i < l; i++) {
      if (iterator.call(context, obj[i], i, obj) === {}) return;
    }
  };
  
  select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };
  
  max = function(obj, iterator, context) {
    if (!iterator && isArray(obj)) return Math.max.apply(Math, obj);
    var result = {computed : -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };
  
  min = function(obj, iterator, context) {
    if (!iterator && isArray(obj)) return Math.min.apply(Math, obj);
    var result = {computed : Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };
  
  any = function(obj, iterator, context) {
    iterator = iterator || identity;
    var result = false;
    if (obj == null) return result;
    each(obj, function(value, index, list) {
      if (result = iterator.call(context, value, index, list)) return {};
    });
    return result;
  };
